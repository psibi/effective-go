* Formatting

- For formatting, *gofmt* is used.
- Some details about it:
  - Go has no line length limit.
  - Tabs for indendation

* Comments

Two styles:

#+begin_example go
/* block comments */

// line comments
#+end_example

* Names

- Names have semantic effect.
- The visibility of a name outside a package is determined by whether
  its first character is upper case.

* Package Names

When a package is imported, the package name becomes an accessor for the contents. After

#+begin_src go-ts
import "bytes"
#+end_src

the importing package can talk about ~bytes.Buffer~.

- By convention, packages are given lower case, single-word names;
  there should be no need for underscores or mixedCaps.
- Another convention is that the package name is the base name of its
  source directory; the package in ~src/encoding/base64~ is imported
  as ~"encoding/base64"~ but has name ~base64~, not encoding_base64
  and not encodingBase64.

* Getters

- Go doesn't provide automatic support for getters and setters.

Example:

#+begin_src go-ts
owner := obj.Owner()
if owner != user {
    obj.SetOwner(user)
}
#+end_src

- Getter method: ~Owner()~
- Setter method: ~SetOwner~
- There is a field called ~owner~ which is in lowercase and hence
  unexported.
- The use of upper-case names for export provides the hook to
  discriminate the field from the method.

* Interface names

By convention, one-method interfaces are named by the method name plus
an -er suffix or similar modification to construct an agent noun:
Reader, Writer, Formatter, CloseNotifier etc.

* MixedCaps

The convention in Go is to use *MixedCaps* or *mixedCaps* rather than
underscores to write multiword names.

* Semicolons

- Like C, Go's formal grammar uses semicolons to terminate statements,
  but unlike in C, those semicolons do not appear in the source.
- Instead the lexer uses a simple rule to insert semicolons
  automatically as it scans, so the input text is mostly free of them.
- The rule is this. If the last token before a newline is an
  identifier (which includes words like int and float64), a basic
  literal such as a number or string constant, or one of these tokens:

#+begin_src go-ts
break continue fallthrough return ++ -- ) }
#+end_src

the lexer always inserts a semicolon after the token.

One consequence of the semicolon insertion rules is that you cannot
put the opening brace of a control structure (if, for, switch, or
select) on the next line. If you do, a semicolon will be inserted
before the brace, which could cause unwanted effects. Write them like
this

#+begin_src go
if i < f() {
    g()
}
#+end_src

not like this

#+begin_src go
if i < f()  // wrong!
{           // wrong!
    g()
}
#+end_src

* Control Structures

- The control structures of Go are related to those of C but differ in
  important ways.
- There is no ~do~ or ~while~ loop, only a slightly generalized ~for~.

** If

#+begin_src go
if x > 0 {
    return y
}
#+end_src

- The braces are mandatory.
- If and switch accept an initialization statement:

#+begin_src go
if err := file.Chmod(0664); err != nil {
    log.Print(err)
    return err
}
#+end_src

Code like this is encouraged where the successful flow of control runs
down the page:

#+begin_src go
f, err := os.Open(name)
if err != nil {
    return err
}
d, err := f.Stat()
if err != nil {
    f.Close()
    return err
}
codeUsing(f, d)
#+end_src

** Redeclaration and reassignment

We see the following code above:

#+begin_src go
f, err := os.Open(name)
d, err := f.Stat()
#+end_src

Observations:
- Declaration operator: *:=*
- err is declared by the first statement, but only re-assigned in the
  second.

In ~a :=~ declaration, a variable *v* may appear even if it has
already been declared, provided:

- this declaration is in the same scope as the existing declaration of v
- the corresponding value in the initialization is assignable to v, and
- there is at least one other variable that is created by the declaration.

This unusual property is pure pragmatism, making it easy to use a
single err value, for example, in a long if-else chain.

** For

There are three forms:

#+begin_src go
// Like a C for
for init; condition; post { }

// Like a C while
for condition { }

// Like a C for(;;)
for { }
#+end_src

Example code:

#+begin_src go-ts
sum := 0
for i := 0; i < 10; i++ {
    sum += i
}
#+end_src

For looping over array, slice, string or map, a *range* clause can
manage the loop:

#+begin_src go-ts
for key, value := range oldMap {
    newMap[key] = value
}
#+end_src

If you only need the first item in the range, drop the second:

#+begin_src go-ts
for key := range m {
    if key.expired() {
        delete(m, key)
    }
}
#+end_src

If you only need the second item in the range:

#+begin_src go-ts
sum := 0
for _, value := range array {
    sum += value
}
#+end_src

For strings, the range does more work for you, breaking out individual
Unicode code points by parsing the UTF-8.

Finally, Go has no comma operator and ++ and -- are statements not
expressions. Thus if you want to run multiple variables in a for you
should use parallel assignment:

#+begin_src go-ts
// Reverse a
for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {
    a[i], a[j] = a[j], a[i]
}
#+end_src

** Switch

Go's switch is more general than C's. The expressions need not be
constants or even integers, the cases are evaluated top to bottom
until a match is found, and if the switch has no expression it
switches on true. It's therefore possible—and idiomatic—to write an
if-else-if-else chain as a switch.

#+begin_src go-ts
func unhex(c byte) byte {
    switch {
    case '0' <= c && c <= '9':
        return c - '0'
    case 'a' <= c && c <= 'f':
        return c - 'a' + 10
    case 'A' <= c && c <= 'F':
        return c - 'A' + 10
    }
    return 0
}
#+end_src

Another example:

#+begin_src go-ts
func shouldEscape(c byte) bool {
    switch c {
    case ' ', '?', '&', '=', '#', '+', '%':
        return true
    }
    return false
}
#+end_src

** Type switch

A switch can also be used to discover the dynamic type of an interface
variable.

#+begin_src go
var t interface{}
t = functionOfSomeType()
switch t := t.(type) {
default:
    fmt.Printf("unexpected type %T\n", t)     // %T prints whatever type t has
case bool:
    fmt.Printf("boolean %t\n", t)             // t has type bool
case int:
    fmt.Printf("integer %d\n", t)             // t has type int
case *bool:
    fmt.Printf("pointer to boolean %t\n", *t) // t has type *bool
case *int:
    fmt.Printf("pointer to integer %d\n", *t) // t has type *int
}
#+end_src
