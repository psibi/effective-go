* Concurrency

** Share by communicating

- Go encourages a different approach in which shared values are passed
  around on channels and, in fact, never actively shared by separate
  threads of execution.
- Only one goroutine has access to the value at any given time. Data
  races cannot occur, by design.

To encourage this way of thinking we have reduced it to a slogan:

~Do not communicate by sharing memory; instead, share memory by
communicating.~

** Goroutines

- A goroutine has a simple model: it is a function executing
  concurrently with other goroutines in the same address space.
- It is lightweight, costing little more than the allocation of stack
  space. And the stacks start small, so they are cheap, and grow by
  allocating (and freeing) heap storage as required.
- Goroutines are multiplexed onto multiple OS threads so if one should
  block, such as while waiting for I/O, others continue to run.
- Prefix a function or method call with the go keyword to run the call
  in a new goroutine. When the call completes, the goroutine exits,
  silently. (The effect is similar to the Unix shell's & notation for
  running a command in the background.)

#+begin_src go
go list.Sort()  // run list.Sort concurrently; don't wait for it.
#+end_src

A function literal can be handy in a goroutine invocation:

#+begin_src go
func Announce(message string, delay time.Duration) {
    go func() {
        time.Sleep(delay)
        fmt.Println(message)
    }()  // Note the parentheses - must call the function.
}
#+end_src

In Go, function literals are closures: the implementation makes sure
the variables referred to by the function survive as long as they are
active.

These examples aren't too practical because the functions have no way
of signaling completion. For that, we need channels.

** Channels

- Like maps, channels are allocated with make, and the resulting value
  acts as a reference to an underlying data structure.
- . If an optional integer parameter is provided, it sets the buffer
  size for the channel. The default is zero, for an unbuffered or
  synchronous channel.

#+begin_src go
ci := make(chan int)            // unbuffered channel of integers
cj := make(chan int, 0)         // unbuffered channel of integers
cs := make(chan *os.File, 100)  // buffered channel of pointers to Files
#+end_src

- Using previous sort example:

#+begin_example go
c := make(chan int)  // Allocate a channel.
// Start the sort in a goroutine; when it completes, signal on the channel.
go func() {
    list.Sort()
    c <- 1  // Send a signal; value does not matter.
}()
doSomethingForAWhile()
<-c   // Wait for sort to finish; discard sent value.
#+end_example

- Receivers always block until there is data to receive.
- If the channel is unbuffered, the sender blocks until the receiver
  has received the value. If the channel has a buffer, the sender
  blocks only until the value has been copied to the buffer; if the
  buffer is full, this means waiting until some receiver has retrieved
  a value.

* Errors

By convention, errors have type error, a simple built-in interface.

#+begin_src go
type error interface {
    Error() string
}
#+end_src

A library writer is free to implement this interface with a richer
model under the covers, making it possible not only to see the error
but also to provide some context.

Example of doing a specific error checking:

#+begin_example go
for try := 0; try < 2; try++ {
    file, err = os.Create(filename)
    if err == nil {
        return
    }
    if e, ok := err.(*os.PathError); ok && e.Err == syscall.ENOSPC {
        deleteTempFiles()  // Recover some space.
        continue
    }
    return
#+end_example

* Panic

- Panic used for situation when an error is uncoverable.

#+begin_src go
panic("hello")
#+end_src

* Recover

- When panic is called, it immediately stops execution of the current
  function and begins unwinding the stack of the goroutine, running
  any deferred functions along the way.
- It is possible to use the built-in function recover to regain
  control of the goroutine and resume normal execution.
- Because the only code that runs while unwinding is inside deferred
  functions, *recover* is only useful inside deferred functions.

#+begin_src go :imports '("log")
  func main() {
          defer func() {
                  if err := recover(); err != nil {
                          log.Println("disappointed: ", err)
                  }
          }()
          panic("Hello world")
  }
#+end_src

#+RESULTS:
2024/02/29 16:28:18 disappointed:  Hello world
